import pandas as pd
import random
from aiogram import Bot, Dispatcher
from aiogram.types import Message, CallbackQuery
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram import Router
import asyncio
import os
from dotenv import load_dotenv
load_dotenv()

#–°–∫—Ä—ã—Ç—ã–π —Ç–æ–∫–µ–Ω
def get_token():
    return os.getenv("BOT_TOKEN")
bot = Bot(token=get_token())
dp = Dispatcher(storage=MemoryStorage())
router = Router()

#–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
anekdots = pd.read_excel("anekdots.xlsx")
ratings_file = "ratings.xlsx"

#/start –∏ /help
@router.message(lambda message: message.text in ["/start", "/help"])
async def start(message: Message):
    await message.answer("/category ‚Äî –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é\n/topcategories ‚Äî —Ä–µ–π—Ç–∏–Ω–≥ –ª—é–±–∏–º—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π")

#/category
@router.message(lambda message: message.text == "/category")
async def category(message: Message):
    kb = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
        [KeyboardButton(text='–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ'), KeyboardButton(text='–£—á—ë–±–∞')],
        [KeyboardButton(text='–†–∞–±–æ—Ç–∞'), KeyboardButton(text='–û–±—â–µ—Å—Ç–≤–æ –∏ –ö—É–ª—å—Ç—É—Ä–∞')]
    ])
    await message.answer("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb)

#/topcategories
@router.message(lambda message: message.text == "/topcategories")
async def top_categories(message: Message):
    try:
        df = pd.read_excel(ratings_file)
        avg = df.groupby('–ö–∞—Ç–µ–≥–æ—Ä–∏—è')['–û—Ü–µ–Ω–∫–∞'].mean().sort_values(ascending=False).head(3)
        txt = '\n'.join([f"{i+1}. {category} ‚Äî ‚≠ê {round(score,1)}" for i, (category, score) in enumerate(avg.items())])
        await message.answer("üèÜ –¢–æ–ø 3 –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n\n" + txt)
    except:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ü–µ–Ω–æ–∫.")

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
@router.message(lambda message: message.text in ['–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '–£—á—ë–±–∞', '–†–∞–±–æ—Ç–∞', '–û–±—â–µ—Å—Ç–≤–æ –∏ –ö—É–ª—å—Ç—É—Ä–∞'])
async def shutochki(message: Message):
    category = message.text
    jokes = anekdots[anekdots['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'] == category]['–¢–µ–∫—Å—Ç'].tolist()
    if not jokes:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –∞–Ω–µ–∫–¥–æ—Ç–æ–≤ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
        return

# –†–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä —à—É—Ç–æ–∫ –∏ –∏—Ö –æ—Ü–µ–Ω–∫–∞
    joke = random.choice(jokes)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='‚≠ê' * i, callback_data=f"{i}|{category}")] for i in range(1, 6)
    ])
    await message.answer(joke, reply_markup=kb)

#–ê–Ω–∞–ª–∏–∑ –æ—Ü–µ–Ω–∫–∏
@router.callback_query()
async def otvet(call: CallbackQuery):
    stars, category = call.data.split('|')
    username = call.from_user.username or f"id_{call.from_user.id}"
    text = call.message.text
    score = int(stars)

# –û–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ —Ç–∞–±–ª–∏—Ü–µ —Å –æ—Ü–µ–Ω–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        df = pd.read_excel(ratings_file)
    except:
        df = pd.DataFrame(columns=['username', '–¢–µ–∫—Å—Ç', '–û—Ü–µ–Ω–∫–∞', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è'])
    new_row = pd.DataFrame([{
        'username': username,
        '–¢–µ–∫—Å—Ç': text,
        '–û—Ü–µ–Ω–∫–∞': score,
        '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': category
    }])
    df = pd.concat([df, new_row], ignore_index=True)
    df.to_excel(ratings_file, index=False)

    await call.message.edit_reply_markup(reply_markup=None)
    await call.message.answer(f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É: {'‚≠ê' * score}")

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
async def main():
    dp.include_router(router)
    await dp.start_polling(bot)

asyncio.run(main())